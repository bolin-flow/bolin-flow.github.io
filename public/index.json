[{"content":" My name is Bolin. I'm documenting my learning notes on this website, where I share my passion for developing statistical solutions, building machine learning models, and learning creative coding. As a principal data scientist at Zinnia, my focus now is on optimizing generative AI and advancing machine learning applications. Feel free to connectâ€”Iâ€™m always excited to explore new perspectives and learn from others. ","date":null,"permalink":"/about/","section":"ðŸ‘‹ Hello!","summary":"My name is Bolin.","title":"ðŸ‘‹ Hello!"},{"content":" ","date":null,"permalink":"/exploring/","section":"Exploring","summary":" ","title":"Exploring"},{"content":"","date":null,"permalink":"/tags/literature-review/","section":"Tags","summary":"","title":"Literature Review"},{"content":"","date":null,"permalink":"/tags/llms/","section":"Tags","summary":"","title":"LLMs"},{"content":"","date":null,"permalink":"/tags/rag/","section":"Tags","summary":"","title":"RAG"},{"content":"","date":"16 July 2024","permalink":"/exploring/paper_review/","section":"Exploring","summary":"","title":"Review the double-edged sword of RAG"},{"content":"","date":null,"permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" Open source, machine learning, creative coding, and sharing ideasâ€¦ ","date":null,"permalink":"/","section":"","summary":" Open source, machine learning, creative coding, and sharing ideasâ€¦ ","title":""},{"content":"","date":null,"permalink":"/tags/creative-coding/","section":"Tags","summary":"","title":"Creative Coding"},{"content":" ","date":null,"permalink":"/developing/","section":"Developing","summary":" ","title":"Developing"},{"content":"","date":null,"permalink":"/tags/generative-art/","section":"Tags","summary":"","title":"Generative Art"},{"content":"","date":null,"permalink":"/tags/hugo/","section":"Tags","summary":"","title":"Hugo"},{"content":"There are some methods to integrate visualizations into a self-hosted Hugo website.\nFor a markdown page in the Hugo content folder, start by creating a folder for each post. Inside this post folder, create an index.md file. This is where we\u0026rsquo;ll edit the content for that post. Hugo allows you to organize posts in different ways such as branch pages, leaf pages or other custom layouts, depending on the preferences. Iâ€™m using the Congo theme, which comes with some helpful explanations in the documentation.\nThe first simple way to add visualizations is to include images inside the content folder. We can download some illustration by Katerina Limpitsouni.\nDownload svg imagesundraw_heart.svg, undraw_cloud.svg, and undraw_floating.svg. There are different ways to insert images to one markdown file.\n\u0026lt;div style=\u0026#34;display: flex; justify-content: center; align-items: center;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_heart.svg\u0026#34; alt=\u0026#34;Heart\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_cloud.svg\u0026#34; alt=\u0026#34;Cloud\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_heart.svg\u0026#34; alt=\u0026#34;Heart\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_cloud.svg\u0026#34; alt=\u0026#34;Cloud\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_heart.svg\u0026#34; alt=\u0026#34;Heart\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;img src=\u0026#34;undraw_cloud.svg\u0026#34; alt=\u0026#34;Cloud\u0026#34; style=\u0026#34;margin-left: 10px;\u0026#34;\u0026gt; \u0026lt;/div\u0026gt; We can also use Hugoâ€™s built-in shortcode for a simpler way to include images.\n{{ \u0026lt; figure src=\u0026ldquo;undraw_floating.svg\u0026rdquo; class=\u0026ldquo;m-auto mt-6 max-w-prose\u0026rdquo; \u0026gt; }}\nIllustration by Katerina Limpitsouni Another creative approach is to embed interactive visualizations using the p5.js JavaScript library. To do this, first, create a js folder inside the static folder of your Hugo web repository. We can place different visualizations built with p5.js or other tools in this js folder, and then call the custom visulizations on specific pages as needed.\nLetâ€™s create a simple interactive particles.js file for current `webpage`` that responds to left mouse clicks. Below, we break down the code into 8 key blocks, explaining how each part contributes to the visualizations triggered by user actions. Try clicking the left mouse button once or twice outside the image area or code block to see the visual effects in action!\nClick to view explanations of the key steps for generating stars and hearts with clicks. *Step 1: Setting Up Variables* let particles = []; let clickCount = 0; particles is an array that will hold all the particle objects we create. clickCount keeps track of the number of left mouse clicks to determine which shape to generate. Step 2: Setting Up the Canvas\nCreates a full-window canvas positioned behind other content.\nfunction setup() { let canvas = createCanvas(windowWidth, windowHeight); canvas.position(0, 0); canvas.style(\u0026#39;z-index\u0026#39;, \u0026#39;-1\u0026#39;); canvas.style(\u0026#39;position\u0026#39;, \u0026#39;fixed\u0026#39;); } setup() is a special function in p5.js that runs once when the program starts. createCanvas(windowWidth, windowHeight) creates a canvas that covers the entire browser window. canvas.position(0, 0) positions the canvas at the top-left corner of the window. canvas.style('z-index', '-1') moves the canvas behind other content on the page. canvas.style('position', 'fixed') ensures the canvas stays fixed in place as the user scrolls. Step 3: Drawing and Updating the Canvas\nfunction draw() { clear(); // Clears the canvas, making it transparent for (let i = particles.length - 1; i \u0026gt;= 0; i--) { particles[i].update(); particles[i].show(); if (particles[i].finished()) { particles.splice(i, 1); } } } Continuously clears and redraws particles, removing them when they fade out.\ndraw() is a special function that continuously executes the code inside it, typically at 60 frames per second. clear() clears the entire canvas, making it transparent, so the previous frame is removed. This for loop goes through each particle in the particles array in reverse order (to avoid issues when removing particles). particles[i].update() updates the particle\u0026rsquo;s position and state. particles[i].show() displays the particle on the canvas. If the particle has \u0026ldquo;finished\u0026rdquo; (its alpha value is below zero), it\u0026rsquo;s removed from the array using particles.splice(i, 1). Step 4: Handling Mouse Clicks\nfunction mousePressed() { clickCount++; setTimeout(() =\u0026gt; { if (clickCount === 1) { addParticles(\u0026#39;star\u0026#39;); } else if (clickCount === 2) { addParticles(\u0026#39;heart\u0026#39;); } clickCount = 0; // Reset click count }, 250); } Tracks single or double clicks to decide which shape to generate.\nmousePressed() is a built-in p5.js function that triggers whenever the mouse is pressed. clickCount++ increments the clickCount variable each time the mouse is clicked. setTimeout() waits for 250 milliseconds to check the number of clicks. If clickCount equals 1, it calls addParticles('star') to generate star-shaped particles. If clickCount equals 2, it calls addParticles('heart') to generate heart-shaped particles. clickCount = 0 resets the click count after processing. Step 5: Adding Particles\nfunction addParticles(shape) { for (let i = 0; i \u0026lt; 10; i++) { // Generate 10 particles particles.push(new Particle(mouseX, mouseY, shape)); } } addParticles(shape) creates 10 new particles at the current mouse position (mouseX, mouseY). Each particle is pushed into the particles array with a specified shape (star or heart). Step 6: Adjusting Canvas Size on Window Resize\nfunction windowResized() { resizeCanvas(windowWidth, windowHeight); } windowResized() is a p5.js function that triggers whenever the browser window is resized. resizeCanvas(windowWidth, windowHeight) adjusts the canvas size to match the new window dimensions. Step 7: Creating the Particle Class\nclass Particle { constructor(x, y, shape) { this.x = x; this.y = y; this.vx = random(-1, 1); this.vy = random(-1, 1); this.alpha = 255; this.color = color(random(255), random(255), random(255), this.alpha); this.shape = shape; } } This code defines a Particle class. The constructor(x, y, shape) method initializes each particle with: x, y: Position on the canvas. vx, vy: Random velocity in both directions. alpha: Initial transparency (255 is fully opaque). color: Random color with the specified alpha. shape: The shape of the particle (star or heart). Step 8: Updating and Showing Star and Heart Particles\nupdate() { this.x += this.vx; this.y += this.vy; this.alpha -= 5; this.color.setAlpha(this.alpha); // Update alpha for fading effect } finished() { return this.alpha \u0026lt; 0; } show() { noStroke(); fill(this.color); if (this.shape === \u0026#39;star\u0026#39;) { beginShape(); for (let i = 0; i \u0026lt; 5; i++) { let angle = TWO_PI / 5 * i; let x = this.x + cos(angle) * 8; let y = this.y + sin(angle) * 8; vertex(x, y); angle += TWO_PI / 10; x = this.x + cos(angle) * 4; y = this.y + sin(angle) * 4; vertex(x, y); } endShape(CLOSE); } else if (this.shape === \u0026#39;heart\u0026#39;) { beginShape(); vertex(this.x, this.y); bezierVertex(this.x - 5, this.y - 5, this.x - 10, this.y + 5, this.x, this.y + 10); bezierVertex(this.x + 10, this.y + 5, this.x + 5, this.y - 5, this.x, this.y); endShape(CLOSE); } } } update(): Updates the particle\u0026rsquo;s position by adding the velocity to x and y. update() also decreases the alpha value, making the particle more transparent over time. finished(): Returns true if the particle is fully transparent (alpha \u0026lt; 0), indicating it should be removed from the particles array. show(): Displays the particle on the canvas: noStroke() removes any outline from the shape. fill(this.color) fills the shape with the random particle\u0026rsquo;s color. If the particle\u0026rsquo;s shape is star, it draws a star using beginShape(), vertex(), and trigonometric functions (cos, sin). If the shape is heart, it draws a heart using bezierVertex() to create smooth curves. ","date":"2 July 2024","permalink":"/developing/interactive_visual/","section":"Developing","summary":"There are some methods to integrate visualizations into a self-hosted Hugo website.","title":"Integrate Interactive Visuals to Hugo Webpage"},{"content":"Congo Config Parameters #Congo layout configuration parameters\nWarping or dommain distortion #Warping, or dommain distortion technique in computer graphics\nOggy interactive visual arts #Oggy open processing art works\nLilian Weng blogs and notes #Lilian Weng\u0026rsquo;s blogs, documentations and learning notes\nEmoji Search\nKaterina Limpitsouni and unDraw #Katerina Limpitsouni Open-source project unDraw\nJavaScript animations using p5.js #Adding JavaScript to Hugo web page animations using p5.js\nDeisy Morselli Gysi webpage #Beautiful background in Deisy Gysiâ€™s site\n#Detailed resume updated on 2023 Sep\n","date":null,"permalink":"/about/useful_links/","section":"ðŸ‘‹ Hello!","summary":"Personal detailed resume link.","title":"ðŸ“Ž Useful Links"},{"content":"","date":null,"permalink":"/categories/","section":"Categories","summary":"","title":"Categories"}]